<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;&lt;tt&gt;Proc&lt;/tt&gt; objects are blocks of code that have been bound to a set of local variables. Once bound, the code may be called in different contexts and still access those variables.&lt;/p&gt;&lt;pre&gt;   def gen_times(factor)
     return Proc.new {|n| n*factor }
   end

   times3 = gen_times(3)
   times5 = gen_times(5)

   times3.call(12)               #=&gt; 36
   times5.call(5)                #=&gt; 25
   times3.call(times5.call(4))   #=&gt; 60
&lt;/pre&gt;</comment>
  <methods>
    <method name='new'>&lt;p&gt;Creates a new &lt;tt&gt;Proc&lt;/tt&gt; object, bound to the current context. &lt;tt&gt;Proc::new&lt;/tt&gt; may be called without a block only within a method with an attached block, in which case that block is converted to the &lt;tt&gt;Proc&lt;/tt&gt; object.&lt;/p&gt;&lt;pre&gt;   def proc_from
     Proc.new
   end
   proc = proc_from { &quot;hello&quot; }
   proc.call   #=&gt; &quot;hello&quot;
&lt;/pre&gt;</method>
    <method name='=='>&lt;p&gt;Return &lt;tt&gt;true&lt;/tt&gt; if &lt;em&gt;prc&lt;/em&gt; is the same object as &lt;em&gt;other_proc&lt;/em&gt;, or if they are both procs with the same body.&lt;/p&gt;</method>
    <method name='[]'>&lt;p&gt;Invokes the block, setting the block&apos;s parameters to the values in &lt;em&gt;params&lt;/em&gt; using something close to method calling semantics. Generates a warning if multiple values are passed to a proc that expects just one (previously this silently converted the parameters to an array).&lt;/p&gt;&lt;p&gt;For procs created using &lt;tt&gt;Kernel.proc&lt;/tt&gt;, generates an error if the wrong number of parameters are passed to a proc with multiple parameters. For procs created using &lt;tt&gt;Proc.new&lt;/tt&gt;, extra parameters are silently discarded.&lt;/p&gt;&lt;p&gt;Returns the value of the last expression evaluated in the block. See also &lt;tt&gt;Proc#yield&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;   a_proc = Proc.new {|a, *b| b.collect {|i| i*a }}
   a_proc.call(9, 1, 2, 3)   #=&gt; [9, 18, 27]
   a_proc[9, 1, 2, 3]        #=&gt; [9, 18, 27]
   a_proc = Proc.new {|a,b| a}
   a_proc.call(1,2,3)
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   prog.rb:5: wrong number of arguments (3 for 2) (ArgumentError)
    from prog.rb:4:in `call&apos;
    from prog.rb:5
&lt;/pre&gt;</method>
    <method name='arity'>&lt;p&gt;Returns the number of arguments that would not be ignored. If the block is declared to take no arguments, returns 0. If the block is known to take exactly n arguments, returns n. If the block has optional arguments, return -n-1, where n is the number of mandatory arguments. A &lt;tt&gt;proc&lt;/tt&gt; with no argument declarations is the same a block declaring &lt;tt&gt;||&lt;/tt&gt; as its arguments.&lt;/p&gt;&lt;pre&gt;   Proc.new {}.arity          #=&gt;  0
   Proc.new {||}.arity        #=&gt;  0
   Proc.new {|a|}.arity       #=&gt;  1
   Proc.new {|a,b|}.arity     #=&gt;  2
   Proc.new {|a,b,c|}.arity   #=&gt;  3
   Proc.new {|*a|}.arity      #=&gt; -1
   Proc.new {|a,*b|}.arity    #=&gt; -2
&lt;/pre&gt;</method>
    <method name='binding'>&lt;p&gt;Returns the binding associated with &lt;em&gt;prc&lt;/em&gt;. Note that &lt;tt&gt;Kernel#eval&lt;/tt&gt; accepts either a &lt;tt&gt;Proc&lt;/tt&gt; or a &lt;tt&gt;Binding&lt;/tt&gt; object as its second parameter.&lt;/p&gt;&lt;pre&gt;   def fred(param)
     proc {}
   end

   b = fred(99)
   eval(&quot;param&quot;, b.binding)   #=&gt; 99
   eval(&quot;param&quot;, b)           #=&gt; 99
&lt;/pre&gt;</method>
    <method name='call'>&lt;p&gt;Invokes the block, setting the block&apos;s parameters to the values in &lt;em&gt;params&lt;/em&gt; using something close to method calling semantics. Generates a warning if multiple values are passed to a proc that expects just one (previously this silently converted the parameters to an array).&lt;/p&gt;&lt;p&gt;For procs created using &lt;tt&gt;Kernel.proc&lt;/tt&gt;, generates an error if the wrong number of parameters are passed to a proc with multiple parameters. For procs created using &lt;tt&gt;Proc.new&lt;/tt&gt;, extra parameters are silently discarded.&lt;/p&gt;&lt;p&gt;Returns the value of the last expression evaluated in the block. See also &lt;tt&gt;Proc#yield&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;   a_proc = Proc.new {|a, *b| b.collect {|i| i*a }}
   a_proc.call(9, 1, 2, 3)   #=&gt; [9, 18, 27]
   a_proc[9, 1, 2, 3]        #=&gt; [9, 18, 27]
   a_proc = Proc.new {|a,b| a}
   a_proc.call(1,2,3)
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   prog.rb:5: wrong number of arguments (3 for 2) (ArgumentError)
    from prog.rb:4:in `call&apos;
    from prog.rb:5
&lt;/pre&gt;</method>
    <method name='clone'>&lt;p&gt;MISSING: documentation&lt;/p&gt;</method>
    <method name='dup'>&lt;p&gt;MISSING: documentation&lt;/p&gt;</method>
    <method name='to_proc'>&lt;p&gt;Part of the protocol for converting objects to &lt;tt&gt;Proc&lt;/tt&gt; objects. Instances of class &lt;tt&gt;Proc&lt;/tt&gt; simply return themselves.&lt;/p&gt;</method>
    <method name='to_s'>&lt;p&gt;Shows the unique identifier for this proc, along with an indication of where the proc was defined.&lt;/p&gt;</method>
  </methods>
</help>