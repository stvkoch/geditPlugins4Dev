<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;Zlib::ZStream is the abstract class for the stream which handles the compressed data. The operations are defined in the subclasses: Zlib::Deflate for compression, and Zlib::Inflate for decompression.&lt;/p&gt;&lt;p&gt;An instance of Zlib::ZStream has one stream (struct zstream in the source) and two variable-length buffers which associated to the input (next_in) of the stream and the output (next_out) of the stream. In this document, &quot;input buffer&quot; means the buffer for input, and &quot;output buffer&quot; means the buffer for output.&lt;/p&gt;&lt;p&gt;Data input into an instance of Zlib::ZStream are temporally stored into the end of input buffer, and then data in input buffer are processed from the beginning of the buffer until no more output from the stream is produced (i.e. until avail_out &gt; 0 after processing). During processing, output buffer is allocated and expanded automatically to hold all output data.&lt;/p&gt;&lt;p&gt;Some particular instance methods consume the data in output buffer and return them as a String.&lt;/p&gt;&lt;p&gt;Here is an ascii art for describing above:&lt;/p&gt;&lt;pre&gt;   +================ an instance of Zlib::ZStream ================+
   ||                                                            ||
   ||     +--------+          +-------+          +--------+      ||
   ||  +--| output |&lt;---------|zstream|&lt;---------| input  |&lt;--+  ||
   ||  |  | buffer |  next_out+-------+next_in   | buffer |   |  ||
   ||  |  +--------+                             +--------+   |  ||
   ||  |                                                      |  ||
   +===|======================================================|===+
       |                                                      |
       v                                                      |
   &quot;output data&quot;                                         &quot;input data&quot;
&lt;/pre&gt;&lt;p&gt;If an error occurs during processing input buffer, an exception which is a subclass of Zlib::Error is raised. At that time, both input and output buffer keep their conditions at the time when the error occurs.&lt;/p&gt;&lt;h2&gt;Method Catalogue&lt;/h2&gt;&lt;p&gt;Many of the methods in this class are fairly low-level and unlikely to be of interest to users. In fact, users are unlikely to use this class directly; rather they will be interested in Zlib::Inflate and Zlib::Deflate.&lt;/p&gt;&lt;p&gt;The higher level methods are listed below.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;#total_in&lt;/li&gt;&lt;li&gt;#total_out&lt;/li&gt;&lt;li&gt;#data_type&lt;/li&gt;&lt;li&gt;#adler&lt;/li&gt;&lt;li&gt;#reset&lt;/li&gt;&lt;li&gt;#finish&lt;/li&gt;&lt;li&gt;#finished?&lt;/li&gt;&lt;li&gt;#close&lt;/li&gt;&lt;li&gt;#closed?&lt;/li&gt;&lt;/ul&gt;</comment>
  <methods>
    <method name='adler'>&lt;p&gt;Returns the adler-32 checksum.&lt;/p&gt;</method>
    <method name='avail_in'>&lt;p&gt;Returns bytes of data in the input buffer. Normally, returns 0.&lt;/p&gt;</method>
    <method name='avail_out'>&lt;p&gt;Returns number of bytes of free spaces in output buffer. Because the free space is allocated automatically, this method returns 0 normally.&lt;/p&gt;</method>
    <method name='avail_out='>&lt;p&gt;Allocates &lt;tt&gt;size&lt;/tt&gt; bytes of free space in the output buffer. If there are more than &lt;tt&gt;size&lt;/tt&gt; bytes already in the buffer, the buffer is truncated. Because free space is allocated automatically, you usually don&apos;t need to use this method.&lt;/p&gt;</method>
    <method name='close'>&lt;p&gt;Closes the stream. All operations on the closed stream will raise an exception.&lt;/p&gt;</method>
    <method name='closed?'>&lt;p&gt;Returns true if the stream is closed.&lt;/p&gt;</method>
    <method name='data_type'>&lt;p&gt;Guesses the type of the data which have been inputed into the stream. The returned value is either &lt;tt&gt;Zlib::BINARY&lt;/tt&gt;, &lt;tt&gt;Zlib::ASCII&lt;/tt&gt;, or &lt;tt&gt;Zlib::UNKNOWN&lt;/tt&gt;.&lt;/p&gt;</method>
    <method name='end'>&lt;p&gt;Closes the stream. All operations on the closed stream will raise an exception.&lt;/p&gt;</method>
    <method name='ended?'>&lt;p&gt;Returns true if the stream is closed.&lt;/p&gt;</method>
    <method name='finish'>&lt;p&gt;Finishes the stream and flushes output buffer. See Zlib::Deflate#finish and Zlib::Inflate#finish for details of this behavior.&lt;/p&gt;</method>
    <method name='finished?'>&lt;p&gt;Returns true if the stream is finished.&lt;/p&gt;</method>
    <method name='flush_next_in'>&lt;p&gt;Flushes input buffer and returns all data in that buffer.&lt;/p&gt;</method>
    <method name='flush_next_out'>&lt;p&gt;Flushes output buffer and returns all data in that buffer.&lt;/p&gt;</method>
    <method name='reset'>&lt;p&gt;Resets and initializes the stream. All data in both input and output buffer are discarded.&lt;/p&gt;</method>
    <method name='stream_end?'>&lt;p&gt;Returns true if the stream is finished.&lt;/p&gt;</method>
    <method name='total_in'>&lt;p&gt;Returns the total bytes of the input data to the stream. FIXME&lt;/p&gt;</method>
    <method name='total_out'>&lt;p&gt;Returns the total bytes of the output data from the stream. FIXME&lt;/p&gt;</method>
  </methods>
</help>