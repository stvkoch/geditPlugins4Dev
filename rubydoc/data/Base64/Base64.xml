<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;The Base64 module provides for the encoding (#encode64) and decoding (#decode64) of binary data using a Base64 representation.&lt;/p&gt;&lt;p&gt;The following particular features are also provided:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;encode into lines of a given length (#b64encode)&lt;/li&gt;&lt;li&gt;decode the special format specified in RFC2047 for the representation of email headers (decode_b)&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;A simple encoding and decoding.&lt;/p&gt;&lt;pre&gt;    require &quot;base64&quot;

    enc   = Base64.encode64(&apos;Send reinforcements&apos;)
                        # -&gt; &quot;U2VuZCByZWluZm9yY2VtZW50cw==\n&quot;
    plain = Base64.decode64(enc)
                        # -&gt; &quot;Send reinforcements&quot;
&lt;/pre&gt;&lt;p&gt;The purpose of using base64 to encode data is that it translates any binary data into purely printable characters. It is specified in RFC 2045 (http://www.faqs.org/rfcs/rfc2045.html).&lt;/p&gt;</comment>
  <methods>
    <method name='b64encode'>&lt;p&gt;&lt;em&gt;Prints&lt;/em&gt; the Base64 encoded version of &lt;tt&gt;bin&lt;/tt&gt; (a &lt;tt&gt;String&lt;/tt&gt;) in lines of &lt;tt&gt;len&lt;/tt&gt; (default 60) characters.&lt;/p&gt;&lt;pre&gt;   require &apos;base64&apos;
   data = &quot;Now is the time for all good coders\nto learn Ruby&quot;
   puts Base64.b64encode(data)
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Generates:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   Tm93IGlzIHRoZSB0aW1lIGZvciBhbGwgZ29vZCBjb2RlcnMKdG8gbGVhcm4g
   UnVieQ==
&lt;/pre&gt;</method>
    <method name='decode64'>&lt;p&gt;Returns the Base64-decoded version of &lt;tt&gt;str&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;  require &apos;base64&apos;
  str = &apos;VGhpcyBpcyBsaW5lIG9uZQpUaGlzIG&apos; +
        &apos;lzIGxpbmUgdHdvClRoaXMgaXMgbGlu&apos; +
        &apos;ZSB0aHJlZQpBbmQgc28gb24uLi4K&apos;
  puts Base64.decode64(str)
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Generates:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   This is line one
   This is line two
   This is line three
   And so on...
&lt;/pre&gt;</method>
    <method name='decode_b'>&lt;p&gt;Decodes text formatted using a subset of RFC2047 (the one used for mime-encoding mail headers).&lt;/p&gt;&lt;p&gt;Only supports an encoding type of &apos;b&apos; (base 64), and only supports the character sets ISO-2022-JP and SHIFT_JIS (so the only two encoded word sequences recognized are &lt;tt&gt;=?ISO-2022-JP?B?...=&lt;/tt&gt; and &lt;tt&gt;=?SHIFT_JIS?B?...=&lt;/tt&gt;). Recognition of these sequences is case insensitive.&lt;/p&gt;</method>
    <method name='encode64'>&lt;p&gt;Returns the Base64-encoded version of &lt;tt&gt;str&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;   require &apos;base64&apos;
   Base64.b64encode(&quot;Now is the time for all good coders\nto learn Ruby&quot;)
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Generates:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   Tm93IGlzIHRoZSB0aW1lIGZvciBhbGwgZ29vZCBjb2RlcnMKdG8gbGVhcm4g
   UnVieQ==
&lt;/pre&gt;</method>
  </methods>
</help>