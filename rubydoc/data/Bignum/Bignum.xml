<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;Bignum objects hold integers outside the range of Fixnum. Bignum objects are created automatically when integer calculations would otherwise overflow a Fixnum. When a calculation involving Bignum objects returns a result that will fit in a Fixnum, the result is automatically converted.&lt;/p&gt;&lt;p&gt;For the purposes of the bitwise operations and &lt;tt&gt;[]&lt;/tt&gt;, a Bignum is treated as if it were an infinite-length bitstring with 2&apos;s complement representation.&lt;/p&gt;&lt;p&gt;While Fixnum values are immediate, Bignum objects are not---assignment and parameter passing work with references to objects, not the objects themselves.&lt;/p&gt;</comment>
  <methods>
    <method name='%'>&lt;p&gt;Returns big modulo other. See Numeric.divmod for more information.&lt;/p&gt;</method>
    <method name='&amp;'>&lt;p&gt;Performs bitwise &lt;tt&gt;and&lt;/tt&gt; between &lt;em&gt;big&lt;/em&gt; and &lt;em&gt;numeric&lt;/em&gt;.&lt;/p&gt;</method>
    <method name='*'>&lt;p&gt;Multiplies big and other, returning the result.&lt;/p&gt;</method>
    <method name='**'>&lt;p&gt;Raises &lt;em&gt;big&lt;/em&gt; to the &lt;em&gt;exponent&lt;/em&gt; power (which may be an integer, float, or anything that will coerce to a number). The result may be a Fixnum, Bignum, or Float&lt;/p&gt;&lt;pre&gt;  123456789 ** 2      #=&gt; 15241578750190521
  123456789 ** 1.2    #=&gt; 5126464716.09932
  123456789 ** -2     #=&gt; 6.5610001194102e-17
&lt;/pre&gt;</method>
    <method name='+'>&lt;p&gt;Adds big and other, returning the result.&lt;/p&gt;</method>
    <method name='-'>&lt;p&gt;Subtracts other from big, returning the result.&lt;/p&gt;</method>
    <method name='-@'>&lt;p&gt;Unary minus (returns a new Bignum whose value is 0-big)&lt;/p&gt;</method>
    <method name='/'>&lt;p&gt;Alias for #quo&lt;/p&gt;</method>
    <method name='&lt;&lt;'>&lt;p&gt;Shifts big left &lt;em&gt;numeric&lt;/em&gt; positions (right if &lt;em&gt;numeric&lt;/em&gt; is negative).&lt;/p&gt;</method>
    <method name='&lt;=&gt;'>&lt;p&gt;Comparison---Returns -1, 0, or +1 depending on whether &lt;em&gt;big&lt;/em&gt; is less than, equal to, or greater than &lt;em&gt;numeric&lt;/em&gt;. This is the basis for the tests in &lt;tt&gt;Comparable&lt;/tt&gt;.&lt;/p&gt;</method>
    <method name='=='>&lt;p&gt;Returns &lt;tt&gt;true&lt;/tt&gt; only if &lt;em&gt;obj&lt;/em&gt; has the same value as &lt;em&gt;big&lt;/em&gt;. Contrast this with &lt;tt&gt;Bignum#eql?&lt;/tt&gt;, which requires &lt;em&gt;obj&lt;/em&gt; to be a &lt;tt&gt;Bignum&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;   68719476736 == 68719476736.0   #=&gt; true
&lt;/pre&gt;</method>
    <method name='&gt;&gt;'>&lt;p&gt;Shifts big right &lt;em&gt;numeric&lt;/em&gt; positions (left if &lt;em&gt;numeric&lt;/em&gt; is negative).&lt;/p&gt;</method>
    <method name='[]'>&lt;p&gt;Bit Reference---Returns the &lt;em&gt;n&lt;/em&gt;th bit in the (assumed) binary representation of &lt;em&gt;big&lt;/em&gt;, where &lt;em&gt;big&lt;/em&gt;[0] is the least significant bit.&lt;/p&gt;&lt;pre&gt;   a = 9**15
   50.downto(0) do |n|
     print a[n]
   end
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   000101110110100000111000011110010100111100010111001
&lt;/pre&gt;</method>
    <method name='^'>&lt;p&gt;Performs bitwise +exclusive or+ between &lt;em&gt;big&lt;/em&gt; and &lt;em&gt;numeric&lt;/em&gt;.&lt;/p&gt;</method>
    <method name='abs'>&lt;p&gt;Returns the absolute value of &lt;em&gt;big&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;   -1234567890987654321.abs   #=&gt; 1234567890987654321
&lt;/pre&gt;</method>
    <method name='coerce'>&lt;p&gt;MISSING: documentation&lt;/p&gt;</method>
    <method name='div'>&lt;p&gt;Divides big by other, returning the result.&lt;/p&gt;</method>
    <method name='divmod'>&lt;p&gt;See &lt;tt&gt;Numeric#divmod&lt;/tt&gt;.&lt;/p&gt;</method>
    <method name='eql?'>&lt;p&gt;Returns &lt;tt&gt;true&lt;/tt&gt; only if &lt;em&gt;obj&lt;/em&gt; is a &lt;tt&gt;Bignum&lt;/tt&gt; with the same value as &lt;em&gt;big&lt;/em&gt;. Contrast this with &lt;tt&gt;Bignum#==&lt;/tt&gt;, which performs type conversions.&lt;/p&gt;&lt;pre&gt;   68719476736.eql?(68719476736.0)   #=&gt; false
&lt;/pre&gt;</method>
    <method name='hash'>&lt;p&gt;Compute a hash based on the value of &lt;em&gt;big&lt;/em&gt;.&lt;/p&gt;</method>
    <method name='modulo'>&lt;p&gt;Returns big modulo other. See Numeric.divmod for more information.&lt;/p&gt;</method>
    <method name='power!'>&lt;p&gt;Alias for #**&lt;/p&gt;</method>
    <method name='quo'>&lt;p&gt;If Rational is defined, returns a Rational number instead of a Bignum.&lt;/p&gt;</method>
    <method name='rdiv'>&lt;p&gt;Alias for #quo&lt;/p&gt;</method>
    <method name='remainder'>&lt;p&gt;Returns the remainder after dividing &lt;em&gt;big&lt;/em&gt; by &lt;em&gt;numeric&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;   -1234567890987654321.remainder(13731)      #=&gt; -6966
   -1234567890987654321.remainder(13731.24)   #=&gt; -9906.22531493148
&lt;/pre&gt;</method>
    <method name='rpower'>&lt;p&gt;Returns a Rational number if the result is in fact rational (i.e. &lt;tt&gt;other&lt;/tt&gt; &lt; 0).&lt;/p&gt;</method>
    <method name='size'>&lt;p&gt;Returns the number of bytes in the machine representation of &lt;em&gt;big&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;   (256**10 - 1).size   #=&gt; 12
   (256**20 - 1).size   #=&gt; 20
   (256**40 - 1).size   #=&gt; 40
&lt;/pre&gt;</method>
    <method name='to_f'>&lt;p&gt;Converts &lt;em&gt;big&lt;/em&gt; to a &lt;tt&gt;Float&lt;/tt&gt;. If &lt;em&gt;big&lt;/em&gt; doesn&apos;t fit in a &lt;tt&gt;Float&lt;/tt&gt;, the result is infinity.&lt;/p&gt;</method>
    <method name='to_s'>&lt;p&gt;Returns a string containing the representation of &lt;em&gt;big&lt;/em&gt; radix &lt;em&gt;base&lt;/em&gt; (2 through 36).&lt;/p&gt;&lt;pre&gt;   12345654321.to_s         #=&gt; &quot;12345654321&quot;
   12345654321.to_s(2)      #=&gt; &quot;1011011111110110111011110000110001&quot;
   12345654321.to_s(8)      #=&gt; &quot;133766736061&quot;
   12345654321.to_s(16)     #=&gt; &quot;2dfdbbc31&quot;
   78546939656932.to_s(36)  #=&gt; &quot;rubyrules&quot;
&lt;/pre&gt;</method>
    <method name='|'>&lt;p&gt;Performs bitwise &lt;tt&gt;or&lt;/tt&gt; between &lt;em&gt;big&lt;/em&gt; and &lt;em&gt;numeric&lt;/em&gt;.&lt;/p&gt;</method>
    <method name='~'>&lt;p&gt;Inverts the bits in big. As Bignums are conceptually infinite length, the result acts as if it had an infinite number of one bits to the left. In hex representations, this is displayed as two periods to the left of the digits.&lt;/p&gt;&lt;pre&gt;  sprintf(&quot;%X&quot;, ~0x1122334455)    #=&gt; &quot;..FEEDDCCBBAA&quot;
&lt;/pre&gt;</method>
  </methods>
</help>