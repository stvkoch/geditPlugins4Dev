<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;No description for this element&lt;/p&gt;</comment>
  <methods>
    <method name='=='>&lt;p&gt;Two method objects are equal if that are bound to the same object and contain the same body.&lt;/p&gt;</method>
    <method name='[]'>&lt;p&gt;Invokes the &lt;em&gt;meth&lt;/em&gt; with the specified arguments, returning the method&apos;s return value.&lt;/p&gt;&lt;pre&gt;   m = 12.method(&quot;+&quot;)
   m.call(3)    #=&gt; 15
   m.call(20)   #=&gt; 32
&lt;/pre&gt;</method>
    <method name='arity'>&lt;p&gt;Returns an indication of the number of arguments accepted by a method. Returns a nonnegative integer for methods that take a fixed number of arguments. For Ruby methods that take a variable number of arguments, returns -n-1, where n is the number of required arguments. For methods written in C, returns -1 if the call takes a variable number of arguments.&lt;/p&gt;&lt;pre&gt;   class C
     def one;    end
     def two(a); end
     def three(*a);  end
     def four(a, b); end
     def five(a, b, *c);    end
     def six(a, b, *c, &amp;d); end
   end
   c = C.new
   c.method(:one).arity     #=&gt; 0
   c.method(:two).arity     #=&gt; 1
   c.method(:three).arity   #=&gt; -1
   c.method(:four).arity    #=&gt; 2
   c.method(:five).arity    #=&gt; -3
   c.method(:six).arity     #=&gt; -3

   &quot;cat&quot;.method(:size).arity      #=&gt; 0
   &quot;cat&quot;.method(:replace).arity   #=&gt; 1
   &quot;cat&quot;.method(:squeeze).arity   #=&gt; -1
   &quot;cat&quot;.method(:count).arity     #=&gt; -1
&lt;/pre&gt;</method>
    <method name='call'>&lt;p&gt;Invokes the &lt;em&gt;meth&lt;/em&gt; with the specified arguments, returning the method&apos;s return value.&lt;/p&gt;&lt;pre&gt;   m = 12.method(&quot;+&quot;)
   m.call(3)    #=&gt; 15
   m.call(20)   #=&gt; 32
&lt;/pre&gt;</method>
    <method name='clone'>&lt;p&gt;MISSING: documentation&lt;/p&gt;</method>
    <method name='inspect'>&lt;p&gt;Show the name of the underlying method.&lt;/p&gt;&lt;pre&gt;  &quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: String#count&gt;&quot;
&lt;/pre&gt;</method>
    <method name='to_proc'>&lt;p&gt;Returns a &lt;tt&gt;Proc&lt;/tt&gt; object corresponding to this method.&lt;/p&gt;</method>
    <method name='to_s'>&lt;p&gt;Show the name of the underlying method.&lt;/p&gt;&lt;pre&gt;  &quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: String#count&gt;&quot;
&lt;/pre&gt;</method>
    <method name='unbind'>&lt;p&gt;Dissociates &lt;em&gt;meth&lt;/em&gt; from it&apos;s current receiver. The resulting &lt;tt&gt;UnboundMethod&lt;/tt&gt; can subsequently be bound to a new object of the same class (see &lt;tt&gt;UnboundMethod&lt;/tt&gt;).&lt;/p&gt;</method>
  </methods>
</help>