<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;Module managing the underlying network protocol(s) used by drb.&lt;/p&gt;&lt;p&gt;By default, drb uses the DRbTCPSocket protocol. Other protocols can be defined. A protocol must define the following class methods:&lt;/p&gt;&lt;pre&gt;  [open(uri, config)] Open a client connection to the server at &lt;tt&gt;uri&lt;/tt&gt;,
                      using configuration &lt;tt&gt;config&lt;/tt&gt;.  Return a protocol
                      instance for this connection.
  [open_server(uri, config)] Open a server listening at &lt;tt&gt;uri&lt;/tt&gt;,
                             using configuration &lt;tt&gt;config&lt;/tt&gt;.  Return a
                             protocol instance for this listener.
  [uri_option(uri, config)] Take a URI, possibly containing an option
                            component (e.g. a trailing &apos;?param=val&apos;),
                            and return a [uri, option] tuple.
&lt;/pre&gt;&lt;p&gt;All of these methods should raise a DRbBadScheme error if the URI does not identify the protocol they support (e.g. &quot;druby:&quot; for the standard Ruby protocol). This is how the DRbProtocol module, given a URI, determines which protocol implementation serves that protocol.&lt;/p&gt;&lt;p&gt;The protocol instance returned by #open_server must have the following methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Accept a new connection to the server. Returns a protocol instance capable of communicating with the client.&lt;/li&gt;&lt;li&gt;Close the server connection.&lt;/li&gt;&lt;li&gt;Get the URI for this server.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The protocol instance returned by #open must have the following methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Send a request to &lt;tt&gt;ref&lt;/tt&gt; with the given message id and arguments. This is most easily implemented by calling DRbMessage.send_request, providing a stream that sits on top of the current protocol.&lt;/li&gt;&lt;li&gt;Receive a reply from the server and return it as a [success-boolean, reply-value] pair. This is most easily implemented by calling DRb.recv_reply, providing a stream that sits on top of the current protocol.&lt;/li&gt;&lt;li&gt;Is this connection still alive?&lt;/li&gt;&lt;li&gt;Close this connection.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The protocol instance returned by #open_server().accept() must have the following methods:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Receive a request from the client and return a [object, message, args, block] tuple. This is most easily implemented by calling DRbMessage.recv_request, providing a stream that sits on top of the current protocol.&lt;/li&gt;&lt;li&gt;Send a reply to the client. This is most easily implemented by calling DRbMessage.send_reply, providing a stream that sits on top of the current protocol.&lt;/li&gt;&lt;li&gt;Close this connection.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A new protocol is registered with the DRbProtocol module using the add_protocol method.&lt;/p&gt;&lt;p&gt;For examples of other protocols, see DRbUNIXSocket in drb/unix.rb, and HTTP0 in sample/http0.rb and sample/http0serv.rb in the full drb distribution.&lt;/p&gt;</comment>
  <methods>
    <method name='add_protocol'>&lt;p&gt;Add a new protocol to the DRbProtocol module.&lt;/p&gt;</method>
    <method name='open'>&lt;p&gt;Open a client connection to &lt;tt&gt;uri&lt;/tt&gt; with the configuration &lt;tt&gt;config&lt;/tt&gt;.&lt;/p&gt;&lt;p&gt;The DRbProtocol module asks each registered protocol in turn to try to open the URI. Each protocol signals that it does not handle that URI by raising a DRbBadScheme error. If no protocol recognises the URI, then a DRbBadURI error is raised. If a protocol accepts the URI, but an error occurs in opening it, a DRbConnError is raised.&lt;/p&gt;</method>
    <method name='open_server'>&lt;p&gt;Open a server listening for connections at &lt;tt&gt;uri&lt;/tt&gt; with configuration &lt;tt&gt;config&lt;/tt&gt;.&lt;/p&gt;&lt;p&gt;The DRbProtocol module asks each registered protocol in turn to try to open a server at the URI. Each protocol signals that it does not handle that URI by raising a DRbBadScheme error. If no protocol recognises the URI, then a DRbBadURI error is raised. If a protocol accepts the URI, but an error occurs in opening it, the underlying error is passed on to the caller.&lt;/p&gt;</method>
    <method name='uri_option'>&lt;p&gt;Parse &lt;tt&gt;uri&lt;/tt&gt; into a [uri, option] pair.&lt;/p&gt;&lt;p&gt;The DRbProtocol module asks each registered protocol in turn to try to parse the URI. Each protocol signals that it does not handle that URI by raising a DRbBadScheme error. If no protocol recognises the URI, then a DRbBadURI error is raised.&lt;/p&gt;</method>
  </methods>
</help>