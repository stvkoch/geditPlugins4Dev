<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;Class representing a drb server instance.&lt;/p&gt;&lt;p&gt;A DRbServer must be running in the local process before any incoming dRuby calls can be accepted, or any local objects can be passed as dRuby references to remote processes, even if those local objects are never actually called remotely. You do not need to start a DRbServer in the local process if you are only making outgoing dRuby calls passing marshalled parameters.&lt;/p&gt;&lt;p&gt;Unless multiple servers are being used, the local DRbServer is normally started by calling DRb.start_service.&lt;/p&gt;</comment>
  <methods>
    <method name='default_acl'>&lt;p&gt;Set the default value for the :acl option.&lt;/p&gt;&lt;p&gt;See #new(). The initial default value is nil.&lt;/p&gt;</method>
    <method name='default_argc_limit'>&lt;p&gt;Set the default value for the :argc_limit option.&lt;/p&gt;&lt;p&gt;See #new(). The initial default value is 256.&lt;/p&gt;</method>
    <method name='default_id_conv'>&lt;p&gt;Set the default value for the :id_conv option.&lt;/p&gt;&lt;p&gt;See #new(). The initial default value is a DRbIdConv instance.&lt;/p&gt;</method>
    <method name='default_load_limit'>&lt;p&gt;Set the default value for the :load_limit option.&lt;/p&gt;&lt;p&gt;See #new(). The initial default value is 25 MB.&lt;/p&gt;</method>
    <method name='default_safe_level'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='new'>&lt;p&gt;Create a new DRbServer instance.&lt;/p&gt;&lt;p&gt;&lt;tt&gt;uri&lt;/tt&gt; is the URI to bind to. This is normally of the form &apos;druby://&lt;hostname&gt;:&lt;port&gt;&apos; where &lt;hostname&gt; is a hostname of the local machine. If nil, then the system&apos;s default hostname will be bound to, on a port selected by the system; these value can be retrieved from the &lt;tt&gt;uri&lt;/tt&gt; attribute. &apos;druby:&apos; specifies the default dRuby transport protocol: another protocol, such as &apos;drbunix:&apos;, can be specified instead.&lt;/p&gt;&lt;p&gt;&lt;tt&gt;front&lt;/tt&gt; is the front object for the server, that is, the object to which remote method calls on the server will be passed. If nil, then the server will not accept remote method calls.&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;config_or_acl&lt;/tt&gt; is a hash, it is the configuration to use for this server. The following options are recognised:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;an id-to-object conversion object. This defaults to an instance of the class DRb::DRbIdConv.&lt;/li&gt;&lt;li&gt;if true, all unsuccessful remote calls on objects in the server will be logged to $stdout. false by default.&lt;/li&gt;&lt;li&gt;the access control list for this server. See the ACL class from the main dRuby distribution.&lt;/li&gt;&lt;li&gt;the maximum message size in bytes accepted by the server. Defaults to 25 MB (26214400).&lt;/li&gt;&lt;li&gt;the maximum number of arguments to a remote method accepted by the server. Defaults to 256.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The default values of these options can be modified on a class-wide basis by the class methods #default_argc_limit, #default_load_limit, #default_acl, #default_id_conv, and #verbose=&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;config_or_acl&lt;/tt&gt; is not a hash, but is not nil, it is assumed to be the access control list for this server. See the :tcp_acl option for more details.&lt;/p&gt;&lt;p&gt;If no other server is currently set as the primary server, this will become the primary server.&lt;/p&gt;&lt;p&gt;The server will immediately start running in its own thread.&lt;/p&gt;</method>
    <method name='verbose'>&lt;p&gt;Get the default value of the :verbose option.&lt;/p&gt;</method>
    <method name='verbose='>&lt;p&gt;Set the default value of the :verbose option.&lt;/p&gt;&lt;p&gt;See #new(). The initial default value is false.&lt;/p&gt;</method>
    <method name='alive?'>&lt;p&gt;Is this server alive?&lt;/p&gt;</method>
    <method name='check_insecure_method'>&lt;p&gt;Check that a method is callable via dRuby.&lt;/p&gt;&lt;p&gt;&lt;tt&gt;obj&lt;/tt&gt; is the object we want to invoke the method on. &lt;tt&gt;msg_id&lt;/tt&gt; is the method name, as a Symbol.&lt;/p&gt;&lt;p&gt;If the method is an insecure method (see #insecure_method?) a SecurityError is thrown. If the method is private or undefined, a NameError is thrown.&lt;/p&gt;</method>
    <method name='stop_service'>&lt;p&gt;Stop this server.&lt;/p&gt;</method>
    <method name='to_id'>&lt;p&gt;Convert a local object to a dRuby reference.&lt;/p&gt;</method>
    <method name='to_obj'>&lt;p&gt;Convert a dRuby reference to the local object it refers to.&lt;/p&gt;</method>
    <method name='verbose'>&lt;p&gt;Get whether the server is in verbose mode.&lt;/p&gt;&lt;p&gt;In verbose mode, failed calls are logged to stdout.&lt;/p&gt;</method>
    <method name='verbose='>&lt;p&gt;Set whether to operate in verbose mode.&lt;/p&gt;&lt;p&gt;In verbose mode, failed calls are logged to stdout.&lt;/p&gt;</method>
  </methods>
</help>