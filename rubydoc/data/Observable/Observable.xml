<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;Implements the Observable design pattern as a mixin so that other objects can be notified of changes in state. See observer.rb for details and an example.&lt;/p&gt;</comment>
  <methods>
    <method name='add_observer'>&lt;p&gt;Add &lt;tt&gt;observer&lt;/tt&gt; as an observer on this object. &lt;tt&gt;observer&lt;/tt&gt; will now receive notifications.&lt;/p&gt;</method>
    <method name='changed'>&lt;p&gt;Set the changed state of this object. Notifications will be sent only if the changed &lt;tt&gt;state&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;.&lt;/p&gt;</method>
    <method name='changed?'>&lt;p&gt;Query the changed state of this object.&lt;/p&gt;</method>
    <method name='count_observers'>&lt;p&gt;Return the number of observers associated with this object.&lt;/p&gt;</method>
    <method name='delete_observer'>&lt;p&gt;Delete &lt;tt&gt;observer&lt;/tt&gt; as an observer on this object. It will no longer receive notifications.&lt;/p&gt;</method>
    <method name='delete_observers'>&lt;p&gt;Delete all observers associated with this object.&lt;/p&gt;</method>
    <method name='notify_observers'>&lt;p&gt;If this object&apos;s changed state is &lt;tt&gt;true&lt;/tt&gt;, invoke the update method in each currently associated observer in turn, passing it the given arguments. The changed state is then set to &lt;tt&gt;false&lt;/tt&gt;.&lt;/p&gt;</method>
  </methods>
</help>