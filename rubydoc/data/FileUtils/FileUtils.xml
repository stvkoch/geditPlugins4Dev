<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;h1&gt;fileutils.rb&lt;/h1&gt;&lt;p&gt;Copyright (c) 2000-2005 Minero Aoki &lt;aamine@loveruby.net&gt;&lt;/p&gt;&lt;p&gt;This program is free software. You can distribute/modify this program under the same terms of ruby.&lt;/p&gt;&lt;h2&gt;module FileUtils&lt;/h2&gt;&lt;p&gt;Namespace for several file utility methods for copying, moving, removing, etc.&lt;/p&gt;&lt;h3&gt;Module Functions&lt;/h3&gt;&lt;pre&gt;  cd(dir, options)
  cd(dir, options) {|dir| .... }
  pwd()
  mkdir(dir, options)
  mkdir(list, options)
  mkdir_p(dir, options)
  mkdir_p(list, options)
  rmdir(dir, options)
  rmdir(list, options)
  ln(old, new, options)
  ln(list, destdir, options)
  ln_s(old, new, options)
  ln_s(list, destdir, options)
  ln_sf(src, dest, options)
  cp(src, dest, options)
  cp(list, dir, options)
  cp_r(src, dest, options)
  cp_r(list, dir, options)
  mv(src, dest, options)
  mv(list, dir, options)
  rm(list, options)
  rm_r(list, options)
  rm_rf(list, options)
  install(src, dest, mode = &lt;src&apos;s&gt;, options)
  chmod(mode, list, options)
  chmod_R(mode, list, options)
  chown(user, group, list, options)
  chown_R(user, group, list, options)
  touch(list, options)
&lt;/pre&gt;&lt;p&gt;The &lt;tt&gt;options&lt;/tt&gt; parameter is a hash of options, taken from the list &lt;tt&gt;:force&lt;/tt&gt;, &lt;tt&gt;:noop&lt;/tt&gt;, &lt;tt&gt;:preserve&lt;/tt&gt;, and &lt;tt&gt;:verbose&lt;/tt&gt;. &lt;tt&gt;:noop&lt;/tt&gt; means that no changes are made. The other two are obvious. Each method documents the options that it honours.&lt;/p&gt;&lt;p&gt;All methods that have the concept of a &quot;source&quot; file or directory can take either one file or a list of files in that argument. See the method documentation for examples.&lt;/p&gt;&lt;p&gt;There are some `low level&apos; methods, which do not accept any option:&lt;/p&gt;&lt;pre&gt;  copy_entry(src, dest, preserve = false, dereference = false)
  copy_file(src, dest, preserve = false, dereference = true)
  copy_stream(srcstream, deststream)
  remove_entry(path, force = false)
  remove_entry_secure(path, force = false)
  remove_file(path, force = false)
  compare_file(path_a, path_b)
  compare_stream(stream_a, stream_b)
  uptodate?(file, cmp_list)
&lt;/pre&gt;&lt;h2&gt;module FileUtils::Verbose&lt;/h2&gt;&lt;p&gt;This module has all methods of FileUtils module, but it outputs messages before acting. This equates to passing the &lt;tt&gt;:verbose&lt;/tt&gt; flag to methods in FileUtils.&lt;/p&gt;&lt;h2&gt;module FileUtils::NoWrite&lt;/h2&gt;&lt;p&gt;This module has all methods of FileUtils module, but never changes files/directories. This equates to passing the &lt;tt&gt;:noop&lt;/tt&gt; flag to methods in FileUtils.&lt;/p&gt;&lt;h2&gt;module FileUtils::DryRun&lt;/h2&gt;&lt;p&gt;This module has all methods of FileUtils module, but never changes files/directories. This equates to passing the &lt;tt&gt;:noop&lt;/tt&gt; and &lt;tt&gt;:verbose&lt;/tt&gt; flags to methods in FileUtils.&lt;/p&gt;</comment>
  <methods>
    <method name='cd'>&lt;p&gt;Options: verbose&lt;/p&gt;&lt;p&gt;Changes the current directory to the directory &lt;tt&gt;dir&lt;/tt&gt;.&lt;/p&gt;&lt;p&gt;If this method is called with block, resumes to the old working directory after the block execution finished.&lt;/p&gt;&lt;pre&gt;  FileUtils.cd(&apos;/&apos;, :verbose =&gt; true)   # chdir and report it
&lt;/pre&gt;</method>
    <method name='chdir'>&lt;p&gt;Alias for #cd&lt;/p&gt;</method>
    <method name='chmod'>&lt;p&gt;Options: noop verbose&lt;/p&gt;&lt;p&gt;Changes permission bits on the named files (in &lt;tt&gt;list&lt;/tt&gt;) to the bit pattern represented by &lt;tt&gt;mode&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;  FileUtils.chmod 0755, &apos;somecommand&apos;
  FileUtils.chmod 0644, %w(my.rb your.rb his.rb her.rb)
  FileUtils.chmod 0755, &apos;/usr/bin/ruby&apos;, :verbose =&gt; true
&lt;/pre&gt;</method>
    <method name='chmod_R'>&lt;p&gt;Options: noop verbose force&lt;/p&gt;&lt;p&gt;Changes permission bits on the named files (in &lt;tt&gt;list&lt;/tt&gt;) to the bit pattern represented by &lt;tt&gt;mode&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;  FileUtils.chmod_R 0700, &quot;/tmp/app.#{$$}&quot;
&lt;/pre&gt;</method>
    <method name='chown'>&lt;p&gt;Options: noop verbose&lt;/p&gt;&lt;p&gt;Changes owner and group on the named files (in &lt;tt&gt;list&lt;/tt&gt;) to the user &lt;tt&gt;user&lt;/tt&gt; and the group &lt;tt&gt;group&lt;/tt&gt;. &lt;tt&gt;user&lt;/tt&gt; and &lt;tt&gt;group&lt;/tt&gt; may be an ID (Integer/String) or a name (String). If &lt;tt&gt;user&lt;/tt&gt; or &lt;tt&gt;group&lt;/tt&gt; is nil, this method does not change the attribute.&lt;/p&gt;&lt;pre&gt;  FileUtils.chown &apos;root&apos;, &apos;staff&apos;, &apos;/usr/local/bin/ruby&apos;
  FileUtils.chown nil, &apos;bin&apos;, Dir.glob(&apos;/usr/bin/*&apos;), :verbose =&gt; true
&lt;/pre&gt;</method>
    <method name='chown_R'>&lt;p&gt;Options: noop verbose force&lt;/p&gt;&lt;p&gt;Changes owner and group on the named files (in &lt;tt&gt;list&lt;/tt&gt;) to the user &lt;tt&gt;user&lt;/tt&gt; and the group &lt;tt&gt;group&lt;/tt&gt; recursively. &lt;tt&gt;user&lt;/tt&gt; and &lt;tt&gt;group&lt;/tt&gt; may be an ID (Integer/String) or a name (String). If &lt;tt&gt;user&lt;/tt&gt; or &lt;tt&gt;group&lt;/tt&gt; is nil, this method does not change the attribute.&lt;/p&gt;&lt;pre&gt;  FileUtils.chown_R &apos;www&apos;, &apos;www&apos;, &apos;/var/www/htdocs&apos;
  FileUtils.chown_R &apos;cvs&apos;, &apos;cvs&apos;, &apos;/var/cvs&apos;, :verbose =&gt; true
&lt;/pre&gt;</method>
    <method name='cmp'>&lt;p&gt;Alias for #compare_file&lt;/p&gt;</method>
    <method name='compare_file'>&lt;p&gt;Returns true if the contents of a file A and a file B are identical.&lt;/p&gt;&lt;pre&gt;  FileUtils.compare_file(&apos;somefile&apos;, &apos;somefile&apos;)  #=&gt; true
  FileUtils.compare_file(&apos;/bin/cp&apos;, &apos;/bin/mv&apos;)    #=&gt; maybe false
&lt;/pre&gt;</method>
    <method name='compare_stream'>&lt;p&gt;Returns true if the contents of a stream &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are identical.&lt;/p&gt;</method>
    <method name='copy'>&lt;p&gt;Alias for #cp&lt;/p&gt;</method>
    <method name='copy_entry'>&lt;p&gt;Copies a file system entry &lt;tt&gt;src&lt;/tt&gt; to &lt;tt&gt;dest&lt;/tt&gt;. If &lt;tt&gt;src&lt;/tt&gt; is a directory, this method copies its contents recursively. This method preserves file types, c.f. symlink, directory... (FIFO, device files and etc. are not supported yet)&lt;/p&gt;&lt;p&gt;Both of &lt;tt&gt;src&lt;/tt&gt; and &lt;tt&gt;dest&lt;/tt&gt; must be a path name. &lt;tt&gt;src&lt;/tt&gt; must exist, &lt;tt&gt;dest&lt;/tt&gt; must not exist.&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;preserve&lt;/tt&gt; is true, this method preserves owner, group, permissions and modified time.&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;dereference_root&lt;/tt&gt; is true, this method dereference tree root.&lt;/p&gt;</method>
    <method name='copy_file'>&lt;p&gt;Copies file contents of &lt;tt&gt;src&lt;/tt&gt; to &lt;tt&gt;dest&lt;/tt&gt;. Both of &lt;tt&gt;src&lt;/tt&gt; and &lt;tt&gt;dest&lt;/tt&gt; must be a path name.&lt;/p&gt;</method>
    <method name='copy_stream'>&lt;p&gt;Copies stream &lt;tt&gt;src&lt;/tt&gt; to &lt;tt&gt;dest&lt;/tt&gt;. &lt;tt&gt;src&lt;/tt&gt; must respond to #read(n) and &lt;tt&gt;dest&lt;/tt&gt; must respond to #write(str).&lt;/p&gt;</method>
    <method name='cp'>&lt;p&gt;Options: preserve noop verbose&lt;/p&gt;&lt;p&gt;Copies a file content &lt;tt&gt;src&lt;/tt&gt; to &lt;tt&gt;dest&lt;/tt&gt;. If &lt;tt&gt;dest&lt;/tt&gt; is a directory, copies &lt;tt&gt;src&lt;/tt&gt; to +dest/src+.&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;src&lt;/tt&gt; is a list of files, then &lt;tt&gt;dest&lt;/tt&gt; must be a directory.&lt;/p&gt;&lt;pre&gt;  FileUtils.cp &apos;eval.c&apos;, &apos;eval.c.org&apos;
  FileUtils.cp %w(cgi.rb complex.rb date.rb), &apos;/usr/lib/ruby/1.6&apos;
  FileUtils.cp %w(cgi.rb complex.rb date.rb), &apos;/usr/lib/ruby/1.6&apos;, :verbose =&gt; true
  FileUtils.cp &apos;symlink&apos;, &apos;dest&apos;   # copy content, &quot;dest&quot; is not a symlink
&lt;/pre&gt;</method>
    <method name='cp_r'>&lt;p&gt;Options: preserve noop verbose dereference_root&lt;/p&gt;&lt;p&gt;Copies &lt;tt&gt;src&lt;/tt&gt; to &lt;tt&gt;dest&lt;/tt&gt;. If &lt;tt&gt;src&lt;/tt&gt; is a directory, this method copies all its contents recursively. If &lt;tt&gt;dest&lt;/tt&gt; is a directory, copies &lt;tt&gt;src&lt;/tt&gt; to +dest/src+.&lt;/p&gt;&lt;p&gt;&lt;tt&gt;src&lt;/tt&gt; can be a list of files.&lt;/p&gt;&lt;pre&gt;  # Installing ruby library &quot;mylib&quot; under the site_ruby
  FileUtils.rm_r site_ruby + &apos;/mylib&apos;, :force
  FileUtils.cp_r &apos;lib/&apos;, site_ruby + &apos;/mylib&apos;

  # Examples of copying several files to target directory.
  FileUtils.cp_r %w(mail.rb field.rb debug/), site_ruby + &apos;/tmail&apos;
  FileUtils.cp_r Dir.glob(&apos;*.rb&apos;), &apos;/home/aamine/lib/ruby&apos;, :noop =&gt; true, :verbose =&gt; true

  # If you want to copy all contents of a directory instead of the
  # directory itself, c.f. src/x -&gt; dest/x, src/y -&gt; dest/y,
  # use following code.
  FileUtils.cp_r &apos;src/.&apos;, &apos;dest&apos;     # cp_r(&apos;src&apos;, &apos;dest&apos;) makes src/dest,
                                     # but this doesn&apos;t.
&lt;/pre&gt;</method>
    <method name='fu_have_symlink?'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='fu_world_writable?'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='getwd'>&lt;p&gt;Alias for #pwd&lt;/p&gt;</method>
    <method name='identical?'>&lt;p&gt;Alias for #compare_file&lt;/p&gt;</method>
    <method name='install'>&lt;p&gt;Options: mode noop verbose&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;src&lt;/tt&gt; is not same as &lt;tt&gt;dest&lt;/tt&gt;, copies it and changes the permission mode to &lt;tt&gt;mode&lt;/tt&gt;. If &lt;tt&gt;dest&lt;/tt&gt; is a directory, destination is &lt;tt&gt;dest&lt;/tt&gt;/&lt;tt&gt;src&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;  FileUtils.install &apos;ruby&apos;, &apos;/usr/local/bin/ruby&apos;, :mode =&gt; 0755, :verbose =&gt; true
  FileUtils.install &apos;lib.rb&apos;, &apos;/usr/local/lib/ruby/site_ruby&apos;, :verbose =&gt; true
&lt;/pre&gt;</method>
    <method name='link'>&lt;p&gt;Alias for #ln&lt;/p&gt;</method>
    <method name='ln'>&lt;p&gt;Options: force noop verbose&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;tt&gt;ln(old, new, options = {})&lt;/tt&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Creates a hard link &lt;tt&gt;new&lt;/tt&gt; which points to &lt;tt&gt;old&lt;/tt&gt;. If &lt;tt&gt;new&lt;/tt&gt; already exists and it is a directory, creates a link +new/old+. If &lt;tt&gt;new&lt;/tt&gt; already exists and it is not a directory, raises Errno::EEXIST. But if :force option is set, overwrite &lt;tt&gt;new&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;  FileUtils.ln &apos;gcc&apos;, &apos;cc&apos;, :verbose =&gt; true
  FileUtils.ln &apos;/usr/bin/emacs21&apos;, &apos;/usr/bin/emacs&apos;
&lt;/pre&gt;&lt;p&gt;&lt;b&gt;&lt;tt&gt;ln(list, destdir, options = {})&lt;/tt&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Creates several hard links in a directory, with each one pointing to the item in &lt;tt&gt;list&lt;/tt&gt;. If &lt;tt&gt;destdir&lt;/tt&gt; is not a directory, raises Errno::ENOTDIR.&lt;/p&gt;&lt;pre&gt;  include FileUtils
  cd &apos;/sbin&apos;
  FileUtils.ln %w(cp mv mkdir), &apos;/bin&apos;   # Now /sbin/cp and /bin/cp are linked.
&lt;/pre&gt;</method>
    <method name='ln_s'>&lt;p&gt;Options: force noop verbose&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;tt&gt;ln_s(old, new, options = {})&lt;/tt&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Creates a symbolic link &lt;tt&gt;new&lt;/tt&gt; which points to &lt;tt&gt;old&lt;/tt&gt;. If &lt;tt&gt;new&lt;/tt&gt; already exists and it is a directory, creates a symbolic link +new/old+. If &lt;tt&gt;new&lt;/tt&gt; already exists and it is not a directory, raises Errno::EEXIST. But if :force option is set, overwrite &lt;tt&gt;new&lt;/tt&gt;.&lt;/p&gt;&lt;pre&gt;  FileUtils.ln_s &apos;/usr/bin/ruby&apos;, &apos;/usr/local/bin/ruby&apos;
  FileUtils.ln_s &apos;verylongsourcefilename.c&apos;, &apos;c&apos;, :force =&gt; true
&lt;/pre&gt;&lt;p&gt;&lt;b&gt;&lt;tt&gt;ln_s(list, destdir, options = {})&lt;/tt&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Creates several symbolic links in a directory, with each one pointing to the item in &lt;tt&gt;list&lt;/tt&gt;. If &lt;tt&gt;destdir&lt;/tt&gt; is not a directory, raises Errno::ENOTDIR.&lt;/p&gt;&lt;p&gt;If &lt;tt&gt;destdir&lt;/tt&gt; is not a directory, raises Errno::ENOTDIR.&lt;/p&gt;&lt;pre&gt;  FileUtils.ln_s Dir.glob(&apos;bin/*.rb&apos;), &apos;/home/aamine/bin&apos;
&lt;/pre&gt;</method>
    <method name='ln_sf'>&lt;p&gt;Options: noop verbose&lt;/p&gt;&lt;p&gt;Same as&lt;/p&gt;&lt;pre&gt;  #ln_s(src, dest, :force)
&lt;/pre&gt;</method>
    <method name='makedirs'>&lt;p&gt;Alias for #mkdir_p&lt;/p&gt;</method>
    <method name='mkdir'>&lt;p&gt;Options: mode noop verbose&lt;/p&gt;&lt;p&gt;Creates one or more directories.&lt;/p&gt;&lt;pre&gt;  FileUtils.mkdir &apos;test&apos;
  FileUtils.mkdir %w( tmp data )
  FileUtils.mkdir &apos;notexist&apos;, :noop =&gt; true  # Does not really create.
  FileUtils.mkdir &apos;tmp&apos;, :mode =&gt; 0700
&lt;/pre&gt;</method>
    <method name='mkdir_p'>&lt;p&gt;Options: mode noop verbose&lt;/p&gt;&lt;p&gt;Creates a directory and all its parent directories. For example,&lt;/p&gt;&lt;pre&gt;  FileUtils.mkdir_p &apos;/usr/local/lib/ruby&apos;
&lt;/pre&gt;&lt;p&gt;causes to make following directories, if it does not exist.&lt;/p&gt;&lt;pre&gt;    * /usr
    * /usr/local
    * /usr/local/lib
    * /usr/local/lib/ruby
&lt;/pre&gt;&lt;p&gt;You can pass several directories at a time in a list.&lt;/p&gt;</method>
    <method name='mkpath'>&lt;p&gt;Alias for #mkdir_p&lt;/p&gt;</method>
    <method name='move'>&lt;p&gt;Alias for #mv&lt;/p&gt;</method>
    <method name='mv'>&lt;p&gt;Options: force noop verbose&lt;/p&gt;&lt;p&gt;Moves file(s) &lt;tt&gt;src&lt;/tt&gt; to &lt;tt&gt;dest&lt;/tt&gt;. If &lt;tt&gt;file&lt;/tt&gt; and &lt;tt&gt;dest&lt;/tt&gt; exist on the different disk partition, the file is copied instead.&lt;/p&gt;&lt;pre&gt;  FileUtils.mv &apos;badname.rb&apos;, &apos;goodname.rb&apos;
  FileUtils.mv &apos;stuff.rb&apos;, &apos;/notexist/lib/ruby&apos;, :force =&gt; true  # no error

  FileUtils.mv %w(junk.txt dust.txt), &apos;/home/aamine/.trash/&apos;
  FileUtils.mv Dir.glob(&apos;test*.rb&apos;), &apos;test&apos;, :noop =&gt; true, :verbose =&gt; true
&lt;/pre&gt;</method>
    <method name='pwd'>&lt;p&gt;Options: (none)&lt;/p&gt;&lt;p&gt;Returns the name of the current directory.&lt;/p&gt;</method>
    <method name='remove'>&lt;p&gt;Alias for #rm&lt;/p&gt;</method>
    <method name='remove_dir'>&lt;p&gt;Removes a directory &lt;tt&gt;dir&lt;/tt&gt; and its contents recursively. This method ignores StandardError if &lt;tt&gt;force&lt;/tt&gt; is true.&lt;/p&gt;</method>
    <method name='remove_entry'>&lt;p&gt;This method removes a file system entry &lt;tt&gt;path&lt;/tt&gt;. &lt;tt&gt;path&lt;/tt&gt; might be a regular file, a directory, or something. If &lt;tt&gt;path&lt;/tt&gt; is a directory, remove it recursively.&lt;/p&gt;&lt;p&gt;See also #remove_entry_secure.&lt;/p&gt;</method>
    <method name='remove_entry_secure'>&lt;p&gt;This method removes a file system entry &lt;tt&gt;path&lt;/tt&gt;. &lt;tt&gt;path&lt;/tt&gt; shall be a regular file, a directory, or something. If &lt;tt&gt;path&lt;/tt&gt; is a directory, remove it recursively. This method is required to avoid TOCTTOU (time-of-check-to-time-of-use) local security vulnerability of #rm_r. #rm_r causes security hole when:&lt;/p&gt;&lt;pre&gt;  * Parent directory is world writable (including /tmp).
  * Removing directory tree includes world writable directory.
  * The system has symbolic link.
&lt;/pre&gt;&lt;p&gt;To avoid this security hole, this method applies special preprocess. If &lt;tt&gt;path&lt;/tt&gt; is a directory, this method chown(2) and chmod(2) all removing directories. This requires the current process is the owner of the removing whole directory tree, or is the super user (root).&lt;/p&gt;&lt;p&gt;WARNING: You must ensure that &lt;b&gt;ALL&lt;/b&gt; parent directories are not world writable. Otherwise this method does not work. Only exception is temporary directory like /tmp and /var/tmp, whose permission is 1777.&lt;/p&gt;&lt;p&gt;WARNING: Only the owner of the removing directory tree, or Unix super user (root) should invoke this method. Otherwise this method does not work.&lt;/p&gt;&lt;p&gt;For details of this security vulnerability, see Perl&apos;s case:&lt;/p&gt;&lt;pre&gt;  http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2005-0448
  http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2004-0452
&lt;/pre&gt;&lt;p&gt;For fileutils.rb, this vulnerability is reported in [ruby-dev:26100].&lt;/p&gt;</method>
    <method name='remove_file'>&lt;p&gt;Removes a file &lt;tt&gt;path&lt;/tt&gt;. This method ignores StandardError if &lt;tt&gt;force&lt;/tt&gt; is true.&lt;/p&gt;</method>
    <method name='rm'>&lt;p&gt;Options: force noop verbose&lt;/p&gt;&lt;p&gt;Remove file(s) specified in &lt;tt&gt;list&lt;/tt&gt;. This method cannot remove directories. All StandardErrors are ignored when the :force option is set.&lt;/p&gt;&lt;pre&gt;  FileUtils.rm %w( junk.txt dust.txt )
  FileUtils.rm Dir.glob(&apos;*.so&apos;)
  FileUtils.rm &apos;NotExistFile&apos;, :force =&gt; true   # never raises exception
&lt;/pre&gt;</method>
    <method name='rm_f'>&lt;p&gt;Options: noop verbose&lt;/p&gt;&lt;p&gt;Equivalent to&lt;/p&gt;&lt;pre&gt;  #rm(list, :force =&gt; true)
&lt;/pre&gt;</method>
    <method name='rm_r'>&lt;p&gt;Options: force noop verbose secure&lt;/p&gt;&lt;p&gt;remove files &lt;tt&gt;list&lt;/tt&gt;[0] &lt;tt&gt;list&lt;/tt&gt;[1]... If &lt;tt&gt;list&lt;/tt&gt;[n] is a directory, removes its all contents recursively. This method ignores StandardError when :force option is set.&lt;/p&gt;&lt;pre&gt;  FileUtils.rm_r Dir.glob(&apos;/tmp/*&apos;)
  FileUtils.rm_r &apos;/&apos;, :force =&gt; true          #  :-)
&lt;/pre&gt;&lt;p&gt;WARNING: This method causes local vulnerability if one of parent directories or removing directory tree are world writable (including /tmp, whose permission is 1777), and the current process has strong privilege such as Unix super user (root), and the system has symbolic link. For secure removing, read the documentation of #remove_entry_secure carefully, and set :secure option to true. Default is :secure=&gt;false.&lt;/p&gt;&lt;p&gt;NOTE: This method calls #remove_entry_secure if :secure option is set. See also #remove_entry_secure.&lt;/p&gt;</method>
    <method name='rm_rf'>&lt;p&gt;Options: noop verbose secure&lt;/p&gt;&lt;p&gt;Equivalent to&lt;/p&gt;&lt;pre&gt;  #rm_r(list, :force =&gt; true)
&lt;/pre&gt;&lt;p&gt;WARNING: This method causes local vulnerability. Read the documentation of #rm_r first.&lt;/p&gt;</method>
    <method name='rmdir'>&lt;p&gt;Options: noop, verbose&lt;/p&gt;&lt;p&gt;Removes one or more directories.&lt;/p&gt;&lt;pre&gt;  FileUtils.rmdir &apos;somedir&apos;
  FileUtils.rmdir %w(somedir anydir otherdir)
  # Does not really remove directory; outputs message.
  FileUtils.rmdir &apos;somedir&apos;, :verbose =&gt; true, :noop =&gt; true
&lt;/pre&gt;</method>
    <method name='rmtree'>&lt;p&gt;Alias for #rm_rf&lt;/p&gt;</method>
    <method name='safe_unlink'>&lt;p&gt;Alias for #rm_f&lt;/p&gt;</method>
    <method name='symlink'>&lt;p&gt;Alias for #ln_s&lt;/p&gt;</method>
    <method name='touch'>&lt;p&gt;Options: noop verbose&lt;/p&gt;&lt;p&gt;Updates modification time (mtime) and access time (atime) of file(s) in &lt;tt&gt;list&lt;/tt&gt;. Files are created if they don&apos;t exist.&lt;/p&gt;&lt;pre&gt;  FileUtils.touch &apos;timestamp&apos;
  FileUtils.touch Dir.glob(&apos;*.c&apos;);  system &apos;make&apos;
&lt;/pre&gt;</method>
    <method name='uptodate?'>&lt;p&gt;Options: (none)&lt;/p&gt;&lt;p&gt;Returns true if &lt;tt&gt;newer&lt;/tt&gt; is newer than all &lt;tt&gt;old_list&lt;/tt&gt;. Non-existent files are older than any file.&lt;/p&gt;&lt;pre&gt;  FileUtils.uptodate?(&apos;hello.o&apos;, %w(hello.c hello.h)) or    #       system &apos;make hello.o&apos;
&lt;/pre&gt;</method>
  </methods>
</help>