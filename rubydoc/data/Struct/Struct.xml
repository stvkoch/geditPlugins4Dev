<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;A &lt;tt&gt;Struct&lt;/tt&gt; is a convenient way to bundle a number of attributes together, using accessor methods, without having to write an explicit class.&lt;/p&gt;&lt;p&gt;The &lt;tt&gt;Struct&lt;/tt&gt; class is a generator of specific classes, each one of which is defined to hold a set of variables and their accessors. In these examples, we&apos;ll call the generated class ``&lt;em&gt;Customer&lt;/em&gt;Class,&apos;&apos; and we&apos;ll show an example instance of that class as ``&lt;em&gt;Customer&lt;/em&gt;Inst.&apos;&apos;&lt;/p&gt;&lt;p&gt;In the descriptions that follow, the parameter &lt;em&gt;symbol&lt;/em&gt; refers to a symbol, which is either a quoted string or a &lt;tt&gt;Symbol&lt;/tt&gt; (such as &lt;tt&gt;:name&lt;/tt&gt;).&lt;/p&gt;</comment>
  <methods>
    <method name='new'></method>
    <method name='yaml_new'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='yaml_tag_class_name'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='yaml_tag_read_class'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='=='>&lt;p&gt;Equality---Returns &lt;tt&gt;true&lt;/tt&gt; if &lt;em&gt;other_struct&lt;/em&gt; is equal to this one: they must be of the same class as generated by &lt;tt&gt;Struct::new&lt;/tt&gt;, and the values of all instance variables must be equal (according to &lt;tt&gt;Object#==&lt;/tt&gt;).&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe   = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joejr = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   jane  = Customer.new(&quot;Jane Doe&quot;, &quot;456 Elm, Anytown NC&quot;, 12345)
   joe == joejr   #=&gt; true
   joe == jane    #=&gt; false
&lt;/pre&gt;</method>
    <method name='[]'>&lt;p&gt;Attribute Reference---Returns the value of the instance variable named by &lt;em&gt;symbol&lt;/em&gt;, or indexed (0..length-1) by &lt;em&gt;fixnum&lt;/em&gt;. Will raise &lt;tt&gt;NameError&lt;/tt&gt; if the named variable does not exist, or &lt;tt&gt;IndexError&lt;/tt&gt; if the index is out of range.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)

   joe[&quot;name&quot;]   #=&gt; &quot;Joe Smith&quot;
   joe[:name]    #=&gt; &quot;Joe Smith&quot;
   joe[0]        #=&gt; &quot;Joe Smith&quot;
&lt;/pre&gt;</method>
    <method name='[]='>&lt;p&gt;Attribute Assignment---Assigns to the instance variable named by &lt;em&gt;symbol&lt;/em&gt; or &lt;em&gt;fixnum&lt;/em&gt; the value &lt;em&gt;obj&lt;/em&gt; and returns it. Will raise a &lt;tt&gt;NameError&lt;/tt&gt; if the named variable does not exist, or an &lt;tt&gt;IndexError&lt;/tt&gt; if the index is out of range.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)

   joe[&quot;name&quot;] = &quot;Luke&quot;
   joe[:zip]   = &quot;90210&quot;

   joe.name   #=&gt; &quot;Luke&quot;
   joe.zip    #=&gt; &quot;90210&quot;
&lt;/pre&gt;</method>
    <method name='each'>&lt;p&gt;Calls &lt;em&gt;block&lt;/em&gt; once for each instance variable, passing the value as a parameter.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.each {|x| puts(x) }
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   Joe Smith
   123 Maple, Anytown NC
   12345
&lt;/pre&gt;</method>
    <method name='each_pair'>&lt;p&gt;Calls &lt;em&gt;block&lt;/em&gt; once for each instance variable, passing the name (as a symbol) and the value as parameters.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.each_pair {|name, value| puts(&quot;#{name} =&gt; #{value}&quot;) }
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   name =&gt; Joe Smith
   address =&gt; 123 Maple, Anytown NC
   zip =&gt; 12345
&lt;/pre&gt;</method>
    <method name='eql?'>&lt;p&gt;code-seq:&lt;/p&gt;&lt;pre&gt;  struct.eql?(other)   =&gt; true or false
&lt;/pre&gt;&lt;p&gt;Two structures are equal if they are the same object, or if all their fields are equal (using &lt;tt&gt;eql?&lt;/tt&gt;).&lt;/p&gt;</method>
    <method name='hash'>&lt;p&gt;Return a hash value based on this struct&apos;s contents.&lt;/p&gt;</method>
    <method name='inspect'>&lt;p&gt;Describe the contents of this struct in a string.&lt;/p&gt;</method>
    <method name='length'>&lt;p&gt;Returns the number of instance variables.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.length   #=&gt; 3
&lt;/pre&gt;</method>
    <method name='members'>&lt;p&gt;Returns an array of strings representing the names of the instance variables.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.members   #=&gt; [&quot;name&quot;, &quot;address&quot;, &quot;zip&quot;]
&lt;/pre&gt;</method>
    <method name='pretty_print'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='pretty_print_cycle'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='select'>&lt;p&gt;Invokes the block passing in successive elements from &lt;em&gt;struct&lt;/em&gt;, returning an array containing those elements for which the block returns a true value (equivalent to &lt;tt&gt;Enumerable#select&lt;/tt&gt;).&lt;/p&gt;&lt;pre&gt;   Lots = Struct.new(:a, :b, :c, :d, :e, :f)
   l = Lots.new(11, 22, 33, 44, 55, 66)
   l.select {|v| (v % 2).zero? }   #=&gt; [22, 44, 66]
&lt;/pre&gt;</method>
    <method name='size'>&lt;p&gt;Returns the number of instance variables.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.length   #=&gt; 3
&lt;/pre&gt;</method>
    <method name='to_a'>&lt;p&gt;Returns the values for this instance as an array.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.to_a[1]   #=&gt; &quot;123 Maple, Anytown NC&quot;
&lt;/pre&gt;</method>
    <method name='to_s'>&lt;p&gt;Describe the contents of this struct in a string.&lt;/p&gt;</method>
    <method name='to_yaml'>&lt;p&gt;No description for this element&lt;/p&gt;</method>
    <method name='values'>&lt;p&gt;Returns the values for this instance as an array.&lt;/p&gt;&lt;pre&gt;   Customer = Struct.new(:name, :address, :zip)
   joe = Customer.new(&quot;Joe Smith&quot;, &quot;123 Maple, Anytown NC&quot;, 12345)
   joe.to_a[1]   #=&gt; &quot;123 Maple, Anytown NC&quot;
&lt;/pre&gt;</method>
    <method name='values_at'>&lt;p&gt;Returns an array containing the elements in &lt;em&gt;self&lt;/em&gt; corresponding to the given selector(s). The selectors may be either integer indices or ranges. See also &lt;/code&gt;.select&lt;code&gt;.&lt;/p&gt;&lt;pre&gt;   a = %w{ a b c d e f }
   a.values_at(1, 3, 5)
   a.values_at(1, 3, 5, 7)
   a.values_at(-1, -3, -5, -7)
   a.values_at(1..3, 2...5)
&lt;/pre&gt;</method>
  </methods>
</help>