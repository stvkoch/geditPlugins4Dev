<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;PStore implements a file based persistance mechanism based on a Hash. User code can store hierarchies of Ruby objects (values) into the data store file by name (keys). An object hierarchy may be just a single object. User code may later read values back from the data store or even update data, as needed.&lt;/p&gt;&lt;p&gt;The transactional behavior ensures that any changes succeed or fail together. This can be used to ensure that the data store is not left in a transitory state, where some values were upated but others were not.&lt;/p&gt;&lt;p&gt;Behind the scenes, Ruby objects are stored to the data store file with Marshal. That carries the usual limitations. Proc objects cannot be marshalled, for example.&lt;/p&gt;&lt;h2&gt;Usage example:&lt;/h2&gt;&lt;pre&gt; require &quot;pstore&quot;

 # a mock wiki object...
 class WikiPage
   def initialize( page_name, author, contents )
     @page_name = page_name
     @revisions = Array.new

     add_revision(author, contents)
   end

   attr_reader :page_name

   def add_revision( author, contents )
     @revisions &lt;&lt; { :created  =&gt; Time.now,
                     :author   =&gt; author,
                     :contents =&gt; contents }
   end

   def wiki_page_references
     [@page_name] + @revisions.last[:contents].scan(/\b(?:[A-Z]+[a-z]+){2,}/)
   end

   # ...
 end

 # create a new page...
 home_page = WikiPage.new( &quot;HomePage&quot;, &quot;James Edward Gray II&quot;,
                           &quot;A page about the JoysOfDocumentation...&quot; )

 # then we want to update page data and the index together, or not at all...
 wiki = PStore.new(&quot;wiki_pages.pstore&quot;)
 wiki.transaction do  # begin transaction; do all of this or none of it
   # store page...
   wiki[home_page.page_name] = home_page
   # ensure that an index has been created...
   wiki[:wiki_index] ||= Array.new
   # update wiki index...
   wiki[:wiki_index].push(*home_page.wiki_page_references)
 end                   # commit changes to wiki data store file

 ### Some time later... ###

 # read wiki data...
 wiki.transaction(true) do  # begin read-only transaction, no changes allowed
   wiki.roots.each do |data_root_name|
     p data_root_name
     p wiki[data_root_name]
   end
 end
&lt;/pre&gt;</comment>
  <methods>
    <method name='new'>&lt;p&gt;To construct a PStore object, pass in the &lt;em&gt;file&lt;/em&gt; path where you would like the data to be stored.&lt;/p&gt;</method>
    <method name='[]'>&lt;p&gt;Retrieves a value from the PStore file data, by &lt;em&gt;name&lt;/em&gt;. The hierarchy of Ruby objects stored under that root &lt;em&gt;name&lt;/em&gt; will be returned.&lt;/p&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='[]='>&lt;p&gt;Stores an individual Ruby object or a hierarchy of Ruby objects in the data store file under the root &lt;em&gt;name&lt;/em&gt;. Assigning to a &lt;em&gt;name&lt;/em&gt; already in the data store clobbers the old data.&lt;/p&gt;&lt;h2&gt;Example:&lt;/h2&gt;&lt;pre&gt; require &quot;pstore&quot;

 store = PStore.new(&quot;data_file.pstore&quot;)
 store.transaction do  # begin transaction
   # load some data into the store...
   store[:single_object] = &quot;My data...&quot;
   store[:obj_heirarchy] = { &quot;Kev Jackson&quot; =&gt; [&quot;rational.rb&quot;, &quot;pstore.rb&quot;],
                             &quot;James Gray&quot;  =&gt; [&quot;erb.rb&quot;, &quot;pstore.rb&quot;] }
 end                   # commit changes to data store file
&lt;/pre&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction and it cannot be read-only. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='abort'>&lt;p&gt;Ends the current PStore#transaction, discarding any changes to the data store.&lt;/p&gt;&lt;h2&gt;Example:&lt;/h2&gt;&lt;pre&gt; require &quot;pstore&quot;

 store = PStore.new(&quot;data_file.pstore&quot;)
 store.transaction do  # begin transaction
   store[:one] = 1     # this change is not applied, see below...
   store[:two] = 2     # this change is not applied, see below...

   store.abort         # end transaction here, discard all changes

   store[:three] = 3   # this change is never reached
 end
&lt;/pre&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='commit'>&lt;p&gt;Ends the current PStore#transaction, committing any changes to the data store immediately.&lt;/p&gt;&lt;h2&gt;Example:&lt;/h2&gt;&lt;pre&gt; require &quot;pstore&quot;

 store = PStore.new(&quot;data_file.pstore&quot;)
 store.transaction do  # begin transaction
   # load some data into the store...
   store[:one] = 1
   store[:two] = 2

   store.commit        # end transaction here, committing changes

   store[:three] = 3   # this change is never reached
 end
&lt;/pre&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='delete'>&lt;p&gt;Removes an object hierarchy from the data store, by &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction and it cannot be read-only. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='fetch'>&lt;p&gt;This method is just like PStore#[], save that you may also provide a &lt;em&gt;default&lt;/em&gt; value for the object. In the event the specified &lt;em&gt;name&lt;/em&gt; is not found in the data store, your &lt;em&gt;default&lt;/em&gt; will be returned instead. If you do not specify a default, PStore::Error will be raised if the object is not found.&lt;/p&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='path'>&lt;p&gt;Returns the path to the data store file.&lt;/p&gt;</method>
    <method name='root?'>&lt;p&gt;Returns true if the supplied &lt;em&gt;name&lt;/em&gt; is currently in the data store.&lt;/p&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='roots'>&lt;p&gt;Returns the names of all object hierarchies currently in the store.&lt;/p&gt;&lt;p&gt;&lt;b&gt;WARNING&lt;/b&gt;: This method is only valid in a PStore#transaction. It will raise PStore::Error if called at any other time.&lt;/p&gt;</method>
    <method name='transaction'>&lt;p&gt;Opens a new transaction for the data store. Code executed inside a block passed to this method may read and write data to and from the data store file.&lt;/p&gt;&lt;p&gt;At the end of the block, changes are committed to the data store automatically. You may exit the transaction early with a call to either PStore#commit or PStore#abort. See those methods for details about how changes are handled. Raising an uncaught Exception in the block is equivalent to calling PStore#abort.&lt;/p&gt;&lt;p&gt;If &lt;em&gt;read_only&lt;/em&gt; is set to &lt;tt&gt;true&lt;/tt&gt;, you will only be allowed to read from the data store during the transaction and any attempts to change the data will raise a PStore::Error.&lt;/p&gt;&lt;p&gt;Note that PStore does not support nested transactions.&lt;/p&gt;</method>
  </methods>
</help>