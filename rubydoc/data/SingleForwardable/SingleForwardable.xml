<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;The SingleForwardable module provides delegation of specified methods to a designated object, using the methods #def_delegator and #def_delegators. This module is similar to Forwardable, but it works on objects themselves, instead of their defining classes.&lt;/p&gt;&lt;p&gt;Also see the example at forwardable.rb.&lt;/p&gt;</comment>
  <methods>
    <method name='def_delegator'>&lt;p&gt;Alias for #def_singleton_delegator&lt;/p&gt;</method>
    <method name='def_delegators'>&lt;p&gt;Alias for #def_singleton_delegators&lt;/p&gt;</method>
    <method name='def_singleton_delegator'>&lt;p&gt;Defines a method &lt;em&gt;method&lt;/em&gt; which delegates to &lt;em&gt;obj&lt;/em&gt; (i.e. it calls the method of the same name in &lt;em&gt;obj&lt;/em&gt;). If &lt;em&gt;new_name&lt;/em&gt; is provided, it is used as the name for the delegate method.&lt;/p&gt;&lt;p&gt;See the example at forwardable.rb.&lt;/p&gt;</method>
    <method name='def_singleton_delegators'>&lt;p&gt;Shortcut for defining multiple delegator methods, but with no provision for using a different name. The following two code samples have the same effect:&lt;/p&gt;&lt;pre&gt;  single_forwardable.def_delegators :@records, :size, :&lt;&lt;, :map

  single_forwardable.def_delegator :@records, :size
  single_forwardable.def_delegator :@records, :&lt;&lt;
  single_forwardable.def_delegator :@records, :map
&lt;/pre&gt;&lt;p&gt;See the example at forwardable.rb.&lt;/p&gt;</method>
  </methods>
</help>