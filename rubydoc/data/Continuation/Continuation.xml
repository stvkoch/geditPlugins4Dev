<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<help>
  <comment>&lt;p&gt;Continuation objects are generated by &lt;tt&gt;Kernel#callcc&lt;/tt&gt;. They hold a return address and execution context, allowing a nonlocal return to the end of the &lt;tt&gt;callcc&lt;/tt&gt; block from anywhere within a program. Continuations are somewhat analogous to a structured version of C&apos;s &lt;tt&gt;setjmp/longjmp&lt;/tt&gt; (although they contain more state, so you might consider them closer to threads).&lt;/p&gt;&lt;p&gt;For instance:&lt;/p&gt;&lt;pre&gt;   arr = [ &quot;Freddie&quot;, &quot;Herbie&quot;, &quot;Ron&quot;, &quot;Max&quot;, &quot;Ringo&quot; ]
   callcc{|$cc|}
   puts(message = arr.shift)
   $cc.call unless message =~ /Max/
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   Freddie
   Herbie
   Ron
   Max
&lt;/pre&gt;&lt;p&gt;This (somewhat contrived) example allows the inner loop to abandon processing early:&lt;/p&gt;&lt;pre&gt;   callcc {|cont|
     for i in 0..4
       print &quot;\n#{i}: &quot;
       for j in i*5...(i+1)*5
         cont.call() if j == 17
         printf &quot;%3d&quot;, j
       end
     end
   }
   print &quot;\n&quot;
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;produces:&lt;/em&gt;&lt;/p&gt;&lt;pre&gt;   0:   0  1  2  3  4
   1:   5  6  7  8  9
   2:  10 11 12 13 14
   3:  15 16
&lt;/pre&gt;</comment>
  <methods>
    <method name='[]'>&lt;p&gt;Invokes the continuation. The program continues from the end of the &lt;tt&gt;callcc&lt;/tt&gt; block. If no arguments are given, the original &lt;tt&gt;callcc&lt;/tt&gt; returns &lt;tt&gt;nil&lt;/tt&gt;. If one argument is given, &lt;tt&gt;callcc&lt;/tt&gt; returns it. Otherwise, an array containing &lt;em&gt;args&lt;/em&gt; is returned.&lt;/p&gt;&lt;pre&gt;   callcc {|cont|  cont.call }           #=&gt; nil
   callcc {|cont|  cont.call 1 }         #=&gt; 1
   callcc {|cont|  cont.call 1, 2, 3 }   #=&gt; [1, 2, 3]
&lt;/pre&gt;</method>
    <method name='call'>&lt;p&gt;Invokes the continuation. The program continues from the end of the &lt;tt&gt;callcc&lt;/tt&gt; block. If no arguments are given, the original &lt;tt&gt;callcc&lt;/tt&gt; returns &lt;tt&gt;nil&lt;/tt&gt;. If one argument is given, &lt;tt&gt;callcc&lt;/tt&gt; returns it. Otherwise, an array containing &lt;em&gt;args&lt;/em&gt; is returned.&lt;/p&gt;&lt;pre&gt;   callcc {|cont|  cont.call }           #=&gt; nil
   callcc {|cont|  cont.call 1 }         #=&gt; 1
   callcc {|cont|  cont.call 1, 2, 3 }   #=&gt; [1, 2, 3]
&lt;/pre&gt;</method>
  </methods>
</help>